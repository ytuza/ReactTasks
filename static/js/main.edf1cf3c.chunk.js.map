{"version":3,"sources":["logo.svg","components/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TodoForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","title","responsible","description","priority","handleImput","bind","assertThisInitialized","handleSubmit","e","_e$target","target","value","name","setState","defineProperty","preventDefault","props","onAddTodo","react_default","a","createElement","className","onSubmit","type","onChange","placeholder","Component","App","todos","handleAddTodo","todo","concat","toConsumableArray","index","window","confirm","filter","i","_this2","map","key","responible","onClick","removeTodo","href","length","src","logo","alt","style","width","height","components_TodoForm","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.edf1cf3c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\n\r\nclass TodoForm extends Component{\r\n\r\n  constructor(){\r\n      super();\r\n      this.state = {\r\n        title : '',\r\n        responsible : '',\r\n        description : '',\r\n        priority : 'low'\r\n      }\r\n      this.handleImput = this.handleImput.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n    handleImput(e){\r\n      const {value, name}= e.target;\r\n      this.setState({\r\n        [name]: value\r\n      })\r\n\r\n    }\r\n\r\n    handleSubmit(e){\r\n      e.preventDefault();\r\n      this.props.onAddTodo(this.state);\r\n    }\r\n\r\n\r\n    render(){\r\n      return(\r\n        <div className = \"card\">\r\n            <form className = \"card-body\" onSubmit = {this.handleSubmit} >\r\n                <div className = \"form-group\">\r\n                    <input\r\n                        type = \"text\"\r\n                        name = \"title\"\r\n                        onChange = {this.handleImput}\r\n                        className = \"form-contol\"\r\n                        placeholder = \"Title\"\r\n\r\n                    />\r\n                </div>\r\n                <div className = \"form-group\">\r\n                    <input\r\n                        type = \"text\"\r\n                        name = \"responsible\"\r\n                        onChange = {this.handleImput}\r\n                        className = \"form-contol\"\r\n                        placeholder = \"Responsible\"\r\n\r\n                    />\r\n                </div>\r\n                <div className = \"form-group\">\r\n                    <input\r\n                        type = \"text\"\r\n                        name = \"description\"\r\n                        onChange = {this.handleImput}\r\n                        className = \"form-contol\"\r\n                        placeholder = \"Description\"\r\n\r\n                    />\r\n                </div>\r\n                <div className = \"form-group\">\r\n                    <select\r\n                        name = \"  priority\"\r\n                        onChange = {this.handleImput}\r\n                        className = \"form-contol\"\r\n                    >\r\n                    <option>low</option>\r\n                    <option>medium</option>\r\n                    <option>high</option>\r\n                    </select>\r\n                </div>\r\n                <button type = \"submit\" className=\"btn btn-primary\">\r\n                Save\r\n\r\n                </button>\r\n            </form>\r\n        </div>\r\n\r\n      )\r\n    }\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {todos} from './todos.json';\n\nimport TodoForm from './components/TodoForm.js';\n\nclass App extends Component {\n  constructor(){\n      super();\n      this.state = {\n        todos\n      }\n      this.handleAddTodo = this.handleAddTodo.bind(this);\n  }\n\n  handleAddTodo(todo)\n  {\n    this.setState({\n      todos: [...this.state.todos, todo]\n    })\n  }\n\n  removeTodo(index){\n\n    if(window.confirm('Estas seguro que quieres borrarlo?')){\n      this.setState({\n        todos: this.state.todos.filter((e,i) => {\n          return i !== index\n        })\n      })\n    }\n  }\n\n  render(){\n    const todos = this.state.todos.map((todo, i)=>{\n      return(\n        <div className = \"col-md-4\" key ={i}>\n          <div className = \"card mt-4\">\n            <div className = \"card-header\">\n              <h3>{todo.title}</h3>\n              <span className = \"badge badge-pill badge-danger ml-2\">\n                  {todo.priority}\n              </span>\n            </div>\n            <div className = \"card-body\">\n              <p>{todo.description}</p>\n              <p><mark>{todo.responible }</mark></p>\n            </div>\n\n            <div className = \"card-footer\">\n              <button className = \"btn btn-danger\"\n                onClick = {this.removeTodo.bind(this,i)}>\n                Delete\n              </button>\n            </div>\n\n          </div>\n        </div>\n\n      )\n    })\n\n    return (\n        <div className=\"App\">\n          <nav className=\"navbar navbar-dark bg-dark\">\n            <a href=\"\" className=\"text-white\">\n              Tareas\n              <span className = \"badge badge-pil badge-light ml-2\">\n                  {this.state.todos.length}\n              </span>\n            </a>\n          </nav>\n\n          <div className = \"container\">\n            <div className = \"row mt-4\">\n              <div className = \"col-md-3\">\n                  <img src={logo} className=\"App-logo\" alt=\"logo\"\n                  style={{width: 100, height: 100}} />\n                  <TodoForm onAddTodo ={this.handleAddTodo}/>\n              </div>\n              <div className = \"col-md-9\">\n                <div className = \"row\">\n                {todos}\n                </div>\n              </div>\n            </div>\n          </div>\n\n        </div>\n      );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}