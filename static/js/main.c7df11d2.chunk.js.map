{"version":3,"sources":["logo.svg","components/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TodoForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","title","responsible","description","priority","handleImput","bind","assertThisInitialized","handleSubmit","e","_e$target","target","value","name","setState","defineProperty","preventDefault","props","onAddTodo","react_default","a","createElement","className","onSubmit","box-sizing","type","onChange","placeholder","Component","App","todos","handleAddTodo","todo","concat","toConsumableArray","console","log","index","window","confirm","filter","i","_this2","map","key","onClick","removeTodo","href","length","src","logo","alt","style","width","height","components_TodoForm","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c7df11d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, {Component} from 'react';\n\nclass TodoForm extends Component{\n\n  constructor(){\n      super();\n      this.state = {\n        title : '',\n        responsible : '',\n        description : '',\n        priority : 'low'\n      }\n      this.handleImput = this.handleImput.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n    handleImput(e){\n      const {value, name}= e.target;\n      this.setState({\n        [name]: value\n      })\n\n    }\n\n    handleSubmit(e){\n      e.preventDefault();\n      this.props.onAddTodo(this.state);\n    }\n\n\n    render(){\n      return(\n        <div className = \"card\">\n            <form className = \"card-body \" onSubmit = {this.handleSubmit} >\n                <div className = \"form-group\" >\n                    <input\n                        box-sizing = \"border-box\"\n                        type = \"text\"\n                        name = \"title\"\n                        onChange = {this.handleImput}\n                        className = \"form-contol\"\n\n                        placeholder = \"Title\"\n\n\n                    />\n                </div>\n                <div className = \"form-group\">\n                    <input\n                        type = \"text\"\n                        name = \"responsible\"\n                        onChange = {this.handleImput}\n                        className = \"form-contol\"\n                        placeholder = \"Responsible\"\n\n                    />\n                </div>\n                <div className = \"form-group\">\n                    <input\n                        type = \"text\"\n                        name = \"description\"\n                        onChange = {this.handleImput}\n                        className = \"form-contol\"\n                        placeholder = \"Description\"\n\n                    />\n                </div>\n                <div className = \"form-group\">\n                    <select\n                        name = \"  priority\"\n                        onChange = {this.handleImput}\n                        className = \"form-contol\"\n                    >\n                    <option>low</option>\n                    <option>medium</option>\n                    <option>high</option>\n                    </select>\n                </div>\n                <button type = \"submit\" className=\"btn btn-primary\">\n                Save\n\n                </button>\n            </form>\n        </div>\n\n      )\n    }\n}\n\nexport default TodoForm;\n","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {todos} from './todos.json';\n\nimport TodoForm from './components/TodoForm.js';\n\nclass App extends Component {\n  constructor(){\n      super();\n      this.state = {\n        todos\n      }\n      this.handleAddTodo = this.handleAddTodo.bind(this);\n  }\n\n  handleAddTodo(todo)\n  {\n\n    this.setState({\n      todos: [...this.state.todos, todo]\n    })\n    console.log(todo);\n  }\n\n  removeTodo(index){\n\n    if(window.confirm('Estas seguro que quieres borrarlo?')){\n      this.setState({\n        todos: this.state.todos.filter((e,i) => {\n          return i !== index\n        })\n      })\n    }\n  }\n\n  render(){\n    const todos = this.state.todos.map((todo, i)=>{\n      return(\n        <div className = \"col-md-4\" key ={i}>\n          <div className = \"card mt-4\">\n            <div className = \"card-header\">\n              <h3>{todo.title}</h3>\n              <span className = \"badge badge-pill badge-danger ml-2\">\n                  {todo.priority}\n              </span>\n            </div>\n            <div className = \"card-body\">\n              <p>{todo.description}</p>\n              <p><mark>{todo.responsible }</mark></p>\n            </div>\n\n            <div className = \"card-footer\">\n              <button className = \"btn btn-danger\"\n                onClick = {this.removeTodo.bind(this,i)}>\n                Delete\n              </button>\n            </div>\n\n          </div>\n        </div>\n\n      )\n    })\n\n    return (\n        <div className=\"App\">\n          <nav className=\"navbar navbar-dark bg-dark\">\n            <a href=\"\" className=\"text-white\">\n              Tareas\n              <span className = \"badge badge-pil badge-light ml-2\">\n                  {this.state.todos.length}\n              </span>\n            </a>\n          </nav>\n\n          <div className = \"container\">\n            <div className = \"row mt-4\">\n              <div className = \"col-md-3\">\n                  <img src={logo} className=\"App-logo\" alt=\"logo\"\n                  style={{width: 100, height: 100}} />\n                  <TodoForm onAddTodo ={this.handleAddTodo}/>\n              </div>\n              <div className = \"col-md-9\">\n                <div className = \"row\">\n                {todos}\n                </div>\n              </div>\n            </div>\n          </div>\n\n        </div>\n      );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}